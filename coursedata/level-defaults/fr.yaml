1:
    intro_text: |
        Bienvenue √† Hedy! Au niveau 1, tu peux utiliser les commandes `affiche`,` demande` et `dit`.

        Sur le c√¥t√© gauche de ton √©cran se trouvent toutes les commandes du niveau 1.

        Appuye sur le bouton bleu et le code sera tap√© pour toi!

        Essaye le code toi-m√™me avec le bouton vert 'Ex√©cuter le code' sous le champ de programmation de gauche.

    example_code : |
        ## Exemple de code
        ```
        affiche Bonjour!
        affiche Bienvenu-e √† Hedy!
        ```

    intro_text_2: |
        Tu peux aussi demander pour une saisie et la r√©p√©ter avec la commande `dit`.
        Essaie le code √† ta gauche encore une fois.

        Tu ne sais pas quoi cr√©er? Dans les prochains onglets, tu trouveras des id√©es de programmes √† construire.
    example_code_2: |
        ## Exemple de code
        ```
        demande Quel est ton mom?
        dit bonjour
        ```

    start_code: "affiche bonjour le monde!"
    commands:
    -   name: "affiche"
        explanation: "Affiche quelque chose avec `affiche`."
        example: "Exemple: affiche Bonjour bienvenu-e √† Hedy!"
        demo_code: "affiche Bonjour bienvenu-e √† Hedy!"
    -   name: "demande"
        explanation: "Demande quelque chose avec `demande`."
        example: "Exemple: demande Quelle est ta couleur pr√©f√©r√©e?"
        demo_code: "demande Quelle est ta couleur pr√©f√©r√©e?"
    -   name: "dit"
        explanation: "R√©p√®te quelque chose avec `dit`."
        example: "Exemple: dit Donc ta couleur pr√©f√©r√©e est "
        demo_code: |-
            demande Quelle est ta couleur pr√©f√©r√©e?
            dit Donc ta couleur pr√©f√©r√©e est 
    -   name: "affiche emojis"
        explanation: "Affiche un emoji avec `affiche`"
        example: "Exemple: affiche üôã‚Äç üåç ‚ùó"
        demo_code: "affiche üôã üåç ‚ùó"
    -   name: "avance"
        explanation: "Dessine une ligne avec `avance`."
        example: "Exemple: avance 100"
        demo_code: "avance 100"
    -   name: "tourne"
        explanation: "Tourne la tortue qui dessine avec `tourne`"
        example: "Exemple: tourne"
        demo_code: |-
            avance 25
            tourne gauche
            avance 25
            tourne droite
2:
    intro_text: |
        Au niveau 2 nous allons apprendre quelque chose de nouveau. Tu peux nommer un mot avec `est`.
        Tu peux utiliser ce mot dans ton code et il sera remplac√© par Hedy comme:

        ```
        nom est Hedy
        affiche Bonjour nom
        ```

        Note: `demande` a chang√©, tu peux aussi enregistrer la r√©ponse dans un nom:

        ```
        r√©ponse est demande Quel est ton nom?
        ```

        L'affich√¢ge marche toujours comme au niveau 1, et tu n'as plus besoin d'utiliser `dit`.

        Une autre commande √† ce niveau est `dors`, qui met le programme en pause pour une seconde.
        Si tu entres un nombre apr√®s la commande `dors`, le programme se met en pause pour autant de secondes.

        ```
        affiche 'Ma couleur pr√©f√©r√©e est...'
        dors 2
        affiche 'vert!'
        ```
    start_code: "affiche bonjour le monde!"
    commands:
    -   name: "est"
        explanation: "Donne un nom √† un mot afin de l'utiliser dans le programme avec la commande `est`. Tu peux choisir le nom toi-m√™me."
        example: "Exemple: nom est Hedy."
        demo_code: |-
            nom est Hedy
            affiche bienvenu-e nom
    -   name: "demande"
        explanation: "Demande quelque chose avec la commande `demande`. Attention! Il faut donner une valeur √† nom avec `est`."
        example: "Exemple: couleur est demande Quelle est ta couleur pr√©f√©r√©e?"
        demo_code: |-
            couleur est demande Quelle est ta couleur pr√©f√©r√©e?
            affiche couleur est ta pr√©f√©r√©e!
    -   name: "dors"
        explanation: "Laisse Hedy faire une pause pour (quelques) seconde(s)."
        example: "Exemple: dors 2 "
        demo_code: |-
            affiche Laisse moi r√©fl√©chir pendant une seconde...
            dors
            affiche Hmm... J'ai besoin de 3 secondes suppl√©mentaires...
            dors 3
            affiche Eur√™ka! J'ai trouv√©!
    -   explanation: "Donne un nom √† un nombre en utilisant `est`. Tu peux choisir le nom toi-m√™me."
        example: "Exemple: angle est 90"
        demo_code: |-
            angle est 90
            tourne angle
            avance 100
        name: est - tortue
3:
    intro_text: |
        Au niveau 3 tu peux aussi faire une liste. Tu peux laisser l'ordinateur choisir un √©l√©ment au hasard dans la liste.
        Tu peux faire √ßa avec `au hasard`.

        ```
        animaux est chien, chat, kangourou
        affiche animaux au hasard
        ```

        Tu peux aussi ajouter des √©l√©ments √† la liste avec `ajoute` et supprimer des √©l√©ments avec `supprime`.

        ```
        animaux est chien, chat, kangourou
        ajoute penguin √† animaux
        supprime chat de animaux
        affiche animaux au hasard
        ```

    start_code: "affiche bonjour le monde!"
    commands:
    -   name: choisis_au_hasard
        explanation: Choisis au hasard d'un groupe avec `au` et `hasard`
        example: 'Exemple: animaux est chien, chat, kangourou.'
        demo_code: |-
            animaux est chien, chat, kangourou
            affiche animaux au hasard
    -   name: "Ajoute"
        explanation: "Ajoute un √©l√©ment √† la liste"
        example: "Exemple: ajoute chien √† animaux"
        demo_code: |-
            animaux est vache, chat
            ajoute chien √† animaux
    -   name: "Supprime"
        explanation: "Supprime un √©l√©ment de la liste"
        example: "Exemple: supprime chien de animaux"
        demo_code: |-
            animaux est chat, chien, vache
            supprime chien de animaux
4:
    start_code: "affiche 'Bonjour le monde'"
    intro_text: |
        Au niveau 4 `demande` et `affiche` ont chang√©.

        Tu dois mettre le texte que tu veux afficher entre des guillemets (qui sont des les symboles apostrophes), `''`.

        Ceci est pratique parce que maintenant tu peux afficher tous les mots que tu veux. √âgalement les mots que tu as utilis√© pour stocker quelque chose avec la commande `est`.

        La plupart des lang√¢ges de programmation utilisent les guillemets lors de l'affich√¢ge, ainsi nous nous approchons un peu plus de la vraie programmation!

        ## Les exercices deviennent de plus en plus complexes

        Tu vas trouver les commandes sur la gauche √† nouveau, et les exercices sur les onglets suivants. Les exercices deviennent de plus en plus difficiles au fur et √† mesure que tu avances dans les onglets.
        Ainsi, il est mieux de commencer √† gauche en suivant l'histoire et travailler √† droite afin d'augmenter la complexit√©.
    commands:
    -   name: "affiche"
        explanation: "Affiche exactement en utilisant les guillemets"
        example: "Exemple: affiche 'Bonjour bienvenu-e √† Hedy.'"
        demo_code: "affiche 'Bonjour bienvenu-e √† Hedy.'"
    -   name: "est"
        explanation: "Donne un nom √† un texte et `affiche` sans les guillemets"
        example: "Exemple: nom est Hedy."
        demo_code: |-
            nom est Hedy
            affiche 'mon nom est ' nom
    -   name: "demande"
        explanation: "Demande quelque chose avec `demande`."
        example: "Exemple: couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'"
        demo_code: |-
            couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'
            affiche couleur ' est ta pr√©f√©r√©e!'
5:
    start_code: |-
        nom est demande 'Quel est ton nom?'
        si nom est Hedy affiche 'cool!' sinon affiche 'bof'
    intro_text: |
        `demande` et `affiche` marchent toujours comme au niveau 4.

        Au niveau 5 il y a une nouveaut√©, le `si`! Avec le `si` tu peux choisir entre deux options diff√©rentes.

        ## Exemple de code Hedy

        ```
        nom est demande 'Quel est ton nom?'
        si nom est Hedy affiche 'cool' sinon affiche 'bof!'
        ```

        Ce code affiche cool si tu entres Hedy comme nom et bof! si tu entres quelques chose d'autre.

        Quand nous voulons v√©rifier si un quelque chose se trouve dans une liste, nous pouvons utiliser `dans` entre le quelque chose et la liste.

        ## Exemple de code Hedy

        ```
        jolies_couelurs est vert, jaune
        couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'
        si couleur dans jolies_couelurs affiche 'joli!' sinon affiche 'bof'
        ```

        Ce code affche joli! si tu choisis ou jaune, et bof sinon.

        ## Conseil
        
        Quelques fois les lignes contenant un `si` deviennent vraiment longues et ne rentrent plus sur une seule ligne. <br> Tu peux diviser le code sur deux lignes, en commen√ßant la seconde ligne au `sinon`:
    
        ```
        nom est demande 'Quel est ton nom?'
        si nom est Hedy affiche 'joli'
        sinon affiche 'bof!'
        ```

        ## Les exercices deviennent de plus en plus difficiles

        Au niveau 5 aussi, les exercices dans les onglets deviennent de plus complexes, alors fais les de gauche √† droite.
    commands:
    -   name: "affiche"
        explanation: "Affiche exactement en utilisant les guillemets"
        example: "Exemple: affiche 'Bonjour bienvenu-e √† Hedy.'"
        demo_code: "affiche 'Bonjour bienvenu-e √† Hedy.'"
    -   name: "demande"
        explanation: "Demande quelque chose avec `demande`."
        example: "Exemple: couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'"
        demo_code: |-
            couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'
            affiche couleur ' est ta pr√©f√©r√©e!'
    -   name: "si"
        explanation: "Fais un choix avec `si`"
        example: "Exemple: si couleur est vert affiche 'joli!' sinon affiche 'bof'"
        demo_code: |-
            couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'
            si couleur est vert affiche 'joli!' sinon affiche 'bof'
    -   name: "si avec tortue"
        explanation: "Fais un choix avec `si`"
        example: "Exemple: si r√©ponse est loin avance 100 sinon avance 5"
        demo_code: |-
            r√©ponse est demande 'Jusqu'o√π dois-je marcher?'
            si r√©ponse est loin avance 100 sinon avance 5
    -   name: "dans"
        explanation: "V√©rifie des √©l√©ments avec `dans`"
        example: "Exemple: si couleur dans jolies_couelurs affiche 'joli!' sinon affiche 'bof'"
        demo_code: |-
            jolies_couelurs est vert, jaune
            couleur est demande 'Quelle est ta couleur pr√©f√©r√©e?'
            si couleur dans jolies_couelurs affiche 'joli!' sinon affiche 'bof'
6:
    start_code: "affiche '5 fois 5 est ' 5 * 5"
    intro_text: |
        `demande`, `affiche` et `si` marchent toujours au niveau 4.
        Mais au niveau 6 tu vas apprendre une nouveaut√©: tu peux √† pr√©sent √©galement calculer.

        En plus c'est facile, il suffit d'√©crire comme en maths: `5 + 5` par example. Pour la soustraction √©galement: `5 - 5`.

        Le fois est un peu diff√©rent, parce qu'il n'existe pas de symbole "fois" sur ton clavier. Cherche, tu verras il n'y est pas!
        C'est pourquoi on multiplie avec l'ast√©risque: `5 * 5`, qui se lit "5 fois 5".

        ## Exemple de code Hedy
        ```
        affiche '5 plus 5 est ' 5 + 5
        affiche '5 moins 5 est ' 5 - 5
        affiche '5 fois 5 est ' 5 * 5
        ```

        On change aussi le stock√¢ge (ou l'assignation)! Tu peux √† pr√©sent utiliser `=` au lieu de `est` quand tu stocke un nombre ou un nom:

        ```
        nom = Hedy
        r√©ponse = 20 + 4
        ```

    commands:
    -   name: "affiche"
        explanation: "Affiche exactement en utilisant les guillemets"
        example: "Exemple: affiche '5 fois 5 est ' 5 * 5"
        demo_code: "affiche '5 fois 5 est ' 5 * 5"
    -   name: "demande"
        explanation: "Demande ce que vaut un calcul et v√©rifie s'il est correct."
        example: "Exemple: r√©ponse est demande 'Que vaut 10 plus 10?'"
        demo_code: |-
            r√©ponse = demande 'Que vaut 10 plus 10?'
            si r√©ponse est 20 affiche 'Oui!' sinon affiche 'Oups'
    -   name: "`demande` et `si` tortue"
        explanation: "Demande √† l'utilisateur-trice combien d'angles il veut"
        example: "Exemple: angles est demande 'Combien d'angles?'"
        demo_code: |-
            angles = demande 'Combient d'angles?'
            angle = 360 / angles
            avance 50
7:
    start_code: "r√©p√®te 3 fois affiche 'Hedy est fun!'"
    intro_text: |
        `demande`, `affiche` et `si` marchent exactement comme aux niveaux 5 et 6.
        Mais le niveau 7 ajoute la commande `r√©p√®te`. R√©p√®te peut √™tre utilis√©e pour ex√©cuter plusieurs fois une ligne de programme.

        ## Exemple de code Hedy

        ```
        r√©p√®te 3 fois affiche 'Hedy est fun!'
        ```
    commands:
    -   name: "affiche"
        explanation: "Affiche exactement en utilisant les guillemets"
        example: "Exemple: affiche 'Bonjour bienvenu-e √† Hedy.'"
        demo_code: "affiche 'Bonjour bienvenu-e √† Hedy.'"
    -   name: "demande"
        explanation: "Demande quelque chose avec `demande`."
        example: "Exemple: couleur = demande 'Quelle est ta couleur pr√©f√©r√©e?'"
        demo_code: |-
            couleur = demande 'Quelle est ta couleur pr√©f√©r√©e?'
            affiche couleur ' est ta pr√©f√©r√©e!'
    -   name: "si"
        explanation: "Fais un choix avec `si`"
        example: "Exemple: si couleur est vert affiche 'joli!' sinon affiche 'bof'"
        demo_code: |-
            couleur = demande 'Quelle est ta couleur pr√©f√©r√©e?'
            si couleur est vert affiche 'joli!' sinon affiche 'bof'
    -   name: "r√©p√®te - tortue"
        explanation: "Repeat a line of code avec `r√©p√®te`."
        example: "Exemple: r√©p√®te 3 fois avance 10"
        demo_code: |-
            r√©p√®te 3 fois avance 10
8:
    start_code: |-
        r√©p√®te 5 fois
            affiche 'Bonjour tout le monde'
            affiche 'Cela s'affichera 5 fois'
    intro_text: |
        `demande` et `affiche` marchent toujours comme d'habitude. Mais `si` et `r√©p√®te` ont chang√©!
        Tu peux maintenant ex√©cuter un bout de code ensemble, mais tu vas de voir *indenter* le code.
        Cela signifie mettre quatre espaces au d√©but de la ligne. Tu vas aussi devoir indenter quand tu veux cr√©er un nouveau bloc ou une nouvelle ligne.

        ## Exemple de code Hedy
        
        ```
        r√©p√®te 5 fois
            affiche 'Bonjour tout le monde'
            affiche 'Ceci est r√©p√©t√© 5 fois'
        ```
    commands:
    -   name: "affiche"
        explanation: "Affiche quelque chose. Souviens-toi d'utiliser les guillemets pour l'affich√¢ge."
        example: "Exemple: affiche '5 fois 5 est ' 5 * 5"
        demo_code: "affiche '5 fois 5 est ' 5 * 5"
    -   name: "demande"
        explanation: "Demande √† l'utilisateur-trice ce que vaut une somme et v√©rifie si le r√©sultat est correct. On peut maintenant afficher deux lignes."
        example: "Exemple: r√©ponse est demande 'Que vaut 5 plus 5?'"
        demo_code: |-
            r√©ponse = demande 'Que vaut 5 plus 5?'
            si r√©ponse est 10
                affiche 'Bien jou√©!'
                affiche 'En effet la bonne r√©ponse est ' r√©ponse
            sinon
                affiche 'Oops!'
                affiche 'La bonne r√©ponse est 10'
    -   name: "`r√©p√®te` avec tortue"
        explanation: "R√©p√®te plusieurs lignes"
        example: "Exemple: dessine un carr√©"
        demo_code: |-
            r√©p√®te 4 fois
                tourne 90
                avance 50
9:
    start_code: |-
        r√©p√®te 3 fois
            nourriture = demande 'Qu'est-ce que tu veux manger?'
            si nourriture est 'pizza'
                affiche 'Joli!'
            sinon
                affiche 'La pizza c'est meilleur.'
    intro_text: |
        Dans niveau tu peux non seulement utiliser plusieurs lignes avec `si` et `r√©p√®te`, mais tu peux aussi les mettre ensemble!
        Dans cet exemple tu vois la commande `si` qui se trouve √† l'int√©rieur de la commande `r√©p√®te`. L'inverse est √©galement possible, et un `si` est √©galement s'imbriquer dans un `si` et un `r√©p√®te` dans un `r√©p√®te`.
        Essaie!

        ## Exemple de code Hedy

        ```
        r√©p√®te 3 fois
            nourriture = demande 'Qu'est-ce que tu veux manger?'
            si nourriture est 'pizza'
                affiche 'Joli!'
            sinon
                affiche 'La pizza c'est meilleur.'
        ```

    commands:
    -   name: "`si` avec plusieurs lignes"
        explanation: "Demande ce que vaut une somme avec 'demande' et d√©termine si cela est correct. Cette fois nous afficherons la r√©ponse sur deux lignes."
        example: "Exemple: r√©ponse = demande 'Que caut 20 plus 20?'"
        demo_code: |-
            r√©ponse = demande 'Que caut 20 plus 20?'
            si r√©ponse est 20
                affiche 'Bien jou√©!!'
                affiche 'La r√©ponse est en effet ' r√©ponse
            sinon
                affiche 'Faux'
                affiche 'La r√©ponse est 20'
    -   name: "`r√©p√®te` et tortue"
        explanation: "R√©p√®te plusieurs lignes"
        example: "Exemple: cr√©e un carr√©"
        demo_code: |-
            r√©p√®te 4 fois
                tourne 90
                avance 50
10:
    start_code: |-
        animaux est chien, chat, blobfish
        pour animal dans animaux
          affiche 'J'aime ' animal
    intro_text: |
        Dans ce niveau nous apprenons une nouvelle commande qui s'appelle `pour`. Avec `pour` tu peux faire une liste et utiliser tous ses √©l√©ments.
        `pour` cr√©e un bloc, comme `r√©p√®te` et `si` donc toutes les lignes du bloc doivent commencer avec des espaces.

        ## Exemple de code Hedy

        ```
        animaux est chien, chat, blobfish
        pour animal dans animaux
          affiche 'J'aime ' animal
        ```
    commands:
    -   name: "affiche"
        explanation: "Affiche quelque chose. Rappelle-toi d'utiliser les guillemets."
        example: "Exemple: affiche '5 fois 5 est ' 5 * 5"
        demo_code: "affiche '5 fois 5 est ' 5 * 5"
    -   name: "pour avec une liste"
        explanation: "affiche tous les √©l√©ments d'une liste"
        example: "Exemple: pour animal dans animaux"
        demo_code: |-
            animaux est chien, chat, blobfish
            pour animal dans animaux
              affiche 'J'aime ' animal
11:
    start_code: |-
        pour compteur dans intervalle 1 √† 5
            affiche compteur
    intro_text: "`affiche` marche comme avant, mais on ajoute une nouvelle forme du `pour`. Tu peux √† pr√©sent √©crire `pour compteur dans intervalle 1 √† 5` et utilise `compteur` dans ton programme. Essaie et regarde ce qu'il se passe! Souviens toi d'utiliser l'indentation pour les `pour` et `si`, (Cela signifie qu'il faut commencer les lignes avec des espaces)."
    commands:
    -   name: "boucle pour"
        explanation: "Nous pouvons utiliser `pour` avec un intervalle"
        example: "pour compteur dans intervalle 1 √† 5"
        demo_code: |-
            pour compteur dans intervalle 1 √† 5
                affiche compteur
    -   name: "demande"
        explanation: "Demande ce que vaut une somme et v√©rifie si le r√©sultat est correct. On peut √† pr√©sent afficher sur deux lignes."
        example: "Exemple: r√©ponse = demande 'Que vaut 5 plus 5?'"
        demo_code: |-
            r√©ponse = demande 'Que vaut 5 plus 5?'
            si r√©ponse est 10
                affiche 'Bien jou√©!'
                affiche 'En effet, la r√©ponse √©tait ' r√©ponse
            sinon
                affiche 'Oups!'
                affiche 'La r√©ponse est 10.'
12:
    start_code: |-
        affiche 'Les nombres d√©cimaux peuvent avoir une virgule, et on utilise un point, `.`'
        affiche 2.5 + 2.5
    intro_text: |
        ## Nombres d√©cimaux

        Jusqu'ici, Hedy ne permettait pas l'utilisation de nombres √† virgules comme 1.5, cela n'est plus le cas. Note que les ordinateurs utilisent le `.` pour repr√©senter la virgule.
        ```
        affiche 'Deux et demi plus deux et demi donne...'
        affiche 2.5 + 2.5
        ```

        ## Tout texte doit √™tre entre guillemets `''`

        Pour ce niveau tu devras utiliser les guillemets quand tu stockes du texte avec `=`:

        ```
        nom = 'Hedy le Robot'
        affiche 'Bonjour ' nom
        ```

        ## Tous les √©l√©ments d'une liste ont besoin de guillemets aussi

        Les listes sont des textes, donc ils ont besoin de guillemets √©galement. Note que chaque √©l√©ment dans la liste a besoin des guillemets.
        Cela permet de sauver deux mots dans une liste comme √©tant un seul √©l√©ment, par exemple 'Iron Man'.

        ```
        super_h√©ros = 'Spiderman', 'Batman', 'Iron Man'
        affiche super_h√©ros au hasard
        ```

        ## Tout texte apr√®s un une comparaison dans un `si` a besoin de guillemets

        ```
        nom = demande 'Quel est ton nom?'
        si nom = 'Hedy le Robot'
            affiche 'Salut!'
        ```

        ## Les nombres n'ont pas besoin de guillemets

        Pour les nombres, il n'y a pas besoin d'utiliser les guillemets pour le `=`:

        ```
        score = 25
        affiche 'Tu as ' score
        ```
    commands:
    -   name: "nombre √† virgule directement"
        explanation: "Nombres √† virgule"
        example: "affiche 2.5 + 2.5"
        demo_code: |
            affiche 'Calcule!'
            affiche 'Deux et demi plus deux et demi est...'
            affiche 2.5 + 2.5
    -   name: "assigne du texte"
        explanation: "Texte avec des guillemets apr√®s un `=`"
        example: "nom = 'Hedy'"
        demo_code: |
            nom = 'Hedy le Robot'
            affiche 'Bonjour ' nom
    -   name: "guillemets apr√®s une comparaison dans un `si`"
        explanation: "Texte avec guillemets apr√®s un `si`"
        example: "nom = 'Hedy'"
        demo_code: |
            nom = demande 'Qui es-tu?'
            si nom = 'Hedy'
                affiche 'Salut!'
    -   name: "guillemets dans une liste"
        explanation: "Une liste avec des guillemets"
        example: "nom = 'Hedy', 'Felienne'"
        demo_code: |
            super_h√©ros = 'Iron Man', 'Batman', 'Superman'
            affiche super_h√©ros au hasard

13:
    start_code: |-
        nom = demande 'Quel est ton nom?'
        √¢ge = demande 'Quel est ton √¢ge?'
        si nom est 'Hedy' et √¢ge est 2
            affiche 'Tu es le vrai Hedy!'
    intro_text: "Nous allons apprendre `et` et `ou`! Si tu veux v√©rifier deux conditions tu n'as pas besoin d'utiliser deux `si`, mais plut√¥t `et` et `ou`. Si tu utilise `et`, les deux conditions, √† gauche et √† droite du `et` doivent √™tre vraies. On peut aussi utiliser `ou`. Dans ce cas uniquement une des conditions doit √™tre v√©rifi√©e."
    commands:
    -   name: "Et"
        explanation: "Les deux parties doivent √™tre correcte"
        example: "si 3+2 est 5 et 2+2 est 4"
        demo_code: |-
            r√©ponse1 = demande 'Combien vaut 3+2?'
            r√©ponse2 = demande 'Combien vaut 2+2?'
            si r√©ponse1 est 5 et r√©ponse2 est 4
                affiche 'Les deux r√©ponses sont correctes!'
            sinon
                affiche 'Au moins une des r√©ponses est fausse!'
    -   name: "Ou"
        explanation: "Au moins une des deux parties doivent √™tre correctes. Si les deux sont correctes cela marche √©galement."
        example: "si 3+2 est 5 ou 2+2 est 4"
        demo_code: |-
            r√©ponse1 = demande 'Combien vaut 3+2?'
            r√©ponse2 = demande 'Combien vaut 2+2?'
            si r√©ponse1 est 5 ou r√©ponse2 est 4
                affiche 'Au moins une r√©ponse est correct!'
            sinon
                affiche 'Les deux r√©ponses sont fausses!'
14:
    start_code: |-
        √¢ge = demande 'Quel √¢ge as-tu?'
        si √¢ge < 13
            affiche 'Tu es plus jeune que moi!'
        sinon
            affiche 'Tu es plus √¢g√©-e que moi!'
    intro_text: |
        Nous allons apprendre quelques nouveaux symboles. Tu connais peut-√™tre d√©j√† les symboles math√©matiques, `<` et `>`.
        Le `<` v√©rifie si le premier nombre est plus petit que le second. Par exemple `√¢ge < 12` v√©rifie si `√¢ge` est plus petit que 12.
        Si tu veux v√©rifier si le premier nombre est plus petit ou √©gal au second, tu peux utiliser `<=`. Par exemple `√¢ge <= 11` v√©rifie si √¢ge est plus petit ou √©gal √† 11.
        Le `>` v√©rifie si le premier nombre est plus grand que le second. Par exemple `points > 10` v√©rifie si `points` est plus grand que 10.
        Si tu veux v√©rifier si le premier nombre est plus grand ou √©gal au second, tu peux utiliser `>=`. Par exemple `points >= 11` v√©rifie si points est plus grand ou √©gal √† 11.
        Utilise ces comparaisons dans un `si`:

        ```
        √¢ge = demande 'Quel √¢ge as-tu?'
        si √¢ge > 12
            affiche 'Tu es plus √¢g√©-e que moi!'
        ```

        √Ä partir  de ce niveau, si tu veux comparer exactement, tu peux utiliser deux signes √©gal, `==`. C'est la notation utilis√©e par la plupart des langages de programmation:
        ```
        nom = demande 'Quel est ton nom?'
        si nom == 'Hedy'
            affiche 'Tu es cool!'
        ```

        Tu peux aussi comparer si quelque chose *n'est pas* √©gal √† quelque en utilisant `!=`:
        ```
        nom = demande 'Quel est ton nom?'
        si nom != 'Hedy'
            affiche 'Tu n'es pas Hedy'
        ```

    commands:
    -   name: "Plus petit que"
        explanation: "Nous utilisons `<` pour v√©rifier si le premier nombre est plus petit que le second."
        example: "Par exemple: √¢ge < 12"
        demo_code: |-
            √¢ge = demande 'Quel √¢ge as-tu?'
            si √¢ge < 13
                affiche 'Tu es plus jeune que moi!'
    -   name: "Plus grand que"
        explanation: "Nous utilisons `>` pour v√©rifier si le premier nombre est plus grand que le second."
        example: "Par exemple: √¢ge > 12"
        demo_code: |-
            √¢ge = demande 'Quel √¢ge as-tu?'
            si √¢ge > 13
                affiche 'Tu es plus √¢g√©-e que moi!'
    -   name: "√âgal"
        explanation: "On utilise `==` pour v√©rifier si deux choses sont les m√™mes."
        example: "Par exemple: r√©ponse == 25"
        demo_code: |-
            r√©ponse = demande 'Combien vaut 5 * 5?'
            si r√©ponse == 25
                affiche 'C'est correct!'
    -   name: "Pas √©gal"
        explanation: "Nous utilisons `!=` pour v√©rifier si deux choses sont diff√©rentes."
        example: "Par exemple: r√©ponse != 25"
        demo_code: |-
            r√©ponse = demande 'Combien vaut 5 * 5?'
            si r√©ponse != 25
                affiche 'Cela n'est pas correct!'

    -   name: "Plus petit ou √©gal"
        explanation: "Nous utilisons `<=` pour v√©rifier si le premier nombre est plus petit ou √©gal au second."
        example: "Par exemple: √¢ge <= 12"
        demo_code: |-
            √¢ge = demande 'Quel √¢ge as-tu?'
            si √¢ge <= 12
                affiche 'Tu es plus jeune que moi!'

    -   name: "Plus grand que ou equal"
        explanation: "Nous utilisons `>=` pour v√©rifier si le premier nombre est plus grand ou √©gal au second."
        example: "Par exemple: √¢ge >= 14"
        demo_code: |-
            √¢ge = demande 'Quel √¢ge as-tu?'
            si √¢ge >= 14
                affiche 'Tu es plus √¢g√©-e que moi!'

15:
    start_code: |-
        r√©ponse = 0
        tant_que r√©ponse != 25
            r√©ponse = demande 'Combien vaut 5 fois 5?'
        affiche 'Une r√©ponse correcte doit √™tre donn√©e!'
    intro_text: |
        Nous allons apprendre une nouvelle boucle: la boucle `tant_que`! Nous r√©p√©tons la boucle aussi longtemps
        que la condition √™tre vraie. N'oublie donc pas de changer la valeur de la condition dans la boucle.

        Dans le code de l'exemple on continue jusqu'√† ce que la bonne r√©ponse soit donn√©e.
        Si la bonne r√©ponse n'est jamais donn√©e, la boucle ne s'arr√™te pas!
    commands:
    -   name: "tant_que"
        explanation: "Nous pouvons utiliser la boucle `tant_que` avec pas √©gal."
        example: "Exemple: tant_que r√©ponse_correcte != 25"
        demo_code: |-
            r√©ponse = 0
            tant_que r√©ponse != 25
                r√©ponse = demande 'Combien vaut 5 fois 5?'
            affiche 'Une bonne r√©ponse a √©t√© donn√©e.'
    -   name: "Plus petit que tant_que"
        explanation: "Nous pouvons utiliser la boucle `tant_que` avec `<` et `>`. "
        example: "Par exemple: tant_que compte < 3"
        demo_code: |-
            compte = 1
            tant_que compte < 3
                affiche 'Nous faisons cela encore ' 3 - compte ' plus de fois'
                compte = compte + 1
            affiche 'C'est fini.'

16:
    start_code: |-
        fruit = ['pomme', 'banane', 'cerise']
        affiche fruit 
    intro_text: |
        Nous allons faire les listes comme en Python (Python est un langage de programmation tr√®s utilis√©) avec des crochets autour des listes!
        Nous gardons les guillemets autour de chaque √©l√©ment comme nous avons appris dans les niveaux pr√©c√©dents.
        Tu peux utiliser les crochets pour indiquer un endroit dans les listes.

        ```
        amis = ['Ahmed', 'Ben', 'Cayden']
        nombres_porte_bonheur = [15, 18, 6]
        pour i dans intervalle 1 √† 3
            affiche 'Le nombre porte bonheur de ' amis[i]
            affiche 'est ' nombres_porte_bonheur[i]
        ```
    commands:
    -   name: "crochets"
        explanation: "Listes avec crochets"
        example: "Par exemple: fruits = ['pomme', 'banane', 'cerise']"
        demo_code: |-
            fruits = ['pomme', 'banane', 'cerise']
            affiche fruits
    -   name: "R√©cup√®re un √©l√©ment de la liste"
        explanation: "Pour r√©cup√©rer un √©l√©ment de la liste on utilise [nombre]. Ainsi fruits[1] veut r√©cup√®re le premier fruit de la liste!"
        example: "Par exemple: premier_fruit = fruits[1]"
        demo_code: |-
            fruit = ['banane', 'pomme', 'cerise']
            premier_fruit = fruits[1]
            affiche premier_fruit
    -   name: "R√©cup√®re un √©l√©ment au hasard de la liste"
        explanation: "Pour r√©cup√©rer un √©l√©ment au hasard de la liste on utilise [hasard]. Ainsi fruits[hasard] veut dire, r√©cup√®re un fruit au hasard de la liste!"
        example: "Par exemple: fruit_au_hasard est fruits[hasard]"
        demo_code: |-
            fruits = ['banane', 'pomme', 'cerise']
            fruit_au_hasard = fruits[hasard]
            affiche fruit_au_hasard


#16:
#    start_code: |-
#        # Ceci est un programme qui pose quelques questions math√©matiques
#        pour i dans intervalle(1, 10):
#            # On demande la table de multiplication de 5
#            r√©ponse est saisie('Combien vaut ' i ' fois 5?')
#            # On v√©rifie sir la r√©ponse est la m√™me que notre somme
#            r√©ponse_correcte est i * 5
#            si r√©ponse est r√©ponse_correcte:
#                affiche(r√©ponse ' est correct.')
#            sinon:
#                affiche('C'est faux, cela doit donner: ' i*5)
#    intro_text: |-
#        Quand tu fais des programmes plus longs, tu devras trouver un moyen de te souvenir ce que fait chaque partie du code. Pour ce faire, on utilise des commentaires.
#        Un commentaire est de la forme suivante:
#         ` # Ceci est un commentaire`. Tout ce qui se trouve apr√®s un # sera invisible pour le code.
#    commands:
#    -   name: "Commentaire"
#        explanation: "On peut placer des commentaires o√π on veut."
#        example: "# Ceci est un commentaire"
#        demo_code: |-
#            # Ce programme affiche Bonjour!
#            # Il a √©t√© fait dans Hedy
#            # Il ne fait rien √† part afficher Bonjour!
#            affiche('Bonjour!')
#20:
#    start_code: |-
#        fruits = ['pomme', 'banane', 'cerise']
#        pour i dans intervalle(1, 3):
#            affiche(fruits[i])
#    intro_text: "Nous pouvons aussi voir tous les √©l√©ments dans une liste avec une boucle `pour`. Comme il y a trois √©l√©ments dans la liste, nous faisons aller la boucle de 1 √† 3. Puis ont affiche √† chaque tour de boucle."
#    commands:
#    -   name: "Longueur de la liste"
#        explanation: "Avec `longueur` on peut conna√Ætre la longueur d'une liste. La longueur de la liste dans cet exemple est de 3, car il y a trois √©l√©ments dans la liste."
#        example: "longueur(list)"
#        demo_code: |-
#            fruits = ['pomme', 'banane', 'cerise']
#            affiche('La longueur de la liste est ' longueur(fruits))
#            pour i dans intervalle(1, longueur(fruits)):
#                affiche(fruits[i])
#21:
#    start_code: |-
#        affiche('Combien vaut 5+3?')
#        r√©ponse = 5+3
#        affiche('La r√©ponse est:')
#        affiche(r√©ponse)
#        si r√©ponse == 8:
#            affiche('C'est correct!')
#        sinon:
#            affiche('Oh non, c'est faux!')
#    intro_text: "√Ä pr√©sent nous allons changer `est` en `=` et `==`. On utilise `=` si on veut assigner une valeur √† une variable. Si on veut assigner 8 √† la variable nomm√©e r√©ponse, on fait r√©ponse = 8. `==` est utilis√©e quand on veut v√©rifier si deux choses sont les m√™mes."
#    commands:
#    -   name: "Comparer"
#        explanation: "Si on veut comparer, on utilise `==`. 5+3 == 8 v√©rifie si 5+3 est √©gal √† 8."
#        example: "Par exemple: 5+3 == 8"
#        demo_code: |-
#            si 5+3 == 8:
#                affiche('5+3 vaut effectivement 8')
#            sinon:
#                affiche('Cela ne sera pas affich√© car 5+3 vaut 8!')
#    -   name: "Assigner une valeur"
#        explanation: "Si on veut assigner une valeur √† une variable nomm√©e r√©ponse √† 8, on fait r√©ponse = 8."
#        example: "Par exemple: r√©ponse = 8"
#        demo_code: |-
#            affiche('Combien vaut 5+3?')
#            r√©ponse = 5+3
#            affiche('r√©ponse est √† pr√©sent:')
#            affiche(r√©ponse)
#    -   name: "Comparer et assigner une valeur"
#        explanation: "Si on veut comparer deux valeurs, on utilise `==`. Si on vet assigner une valeur √† une variable, on utilise `=`. "
#        example: "Par exemple: 5+3 == 8, r√©ponse = 8"
#        demo_code: |-
#            affiche('Combien vaut 5+3?')
#            r√©ponse = 5+3
#            affiche('r√©ponse est √† pr√©sent:')
#            affiche(r√©ponse)
#            si r√©ponse == 8:
#                affiche('C'est correct!')
#            sinon:
#                affiche('Nom, c'est faux!')
17:
    start_code: |-
        pour i dans intervalle 1 √† 10:
            affiche i
        affiche 'Pr√™t ou pas, j'arrive!'
    intro_text: |
        Maintenant nous allons changer un peu les r√®gles de l'indentation. Chaque fois que nous avons une identation, nous aurons besoin d'un `:` √† la fin de la ligne avant l'indentation.

        Dans ce niveau tu peux aussi utiliser la commande: `sinon_si`. `sinon_si` si tu veux un `si` avec 3 (ou plus!) options.
        Essaie!
        ```
        prix = ['1 million de dollars', 'une tarte aux pommes', 'rien']
        ton_prix = prices[hasard]
        affiche 'Tu gagnes ' ton_prix
        si ton_prix == '1 million de dollars' :
            affiche 'Super! Tu es riche'
        sinon_si ton_prix == 'une tarte aux pommes' :
            affiche 'Chouette, une tarte aux pommes!'
        sinon:
            affiche 'Tu auras plus de chance la prochaine fois...'
        ```

    commands:
    -   name: "sinon_si"
        explanation: "`sinon_si`."
        example: "sinon_si a est 5:"
        demo_code: |-
            a = 2
            si a == 1:
                affiche 'a est 1'
            sinon_si a == 2:
                affiche 'a est 2'
            sinon:
                affiche 'a est ni 1 ni 2'
    -   name: "affiche"
        explanation: "Quand on utilise `pour`, nous avons besoin de mettre un `:` √† la fin de la ligne du `pour`!"
        example: "pour i dans intervalle 1 √† 10:"
        demo_code: |-
            pour i dans intervalle 1 √† 12:
                affiche i
            affiche 'Pr√™t ou pas j'arrive!'
    -   name: "si"
        explanation: "Nous devons faire pareil avec tous nos `si`"
        example: "si couleur est vert:'"
        demo_code: |-
            couleur = demande 'Quelle est ta couleur pr√©f√©r√©e?'
            si couleur == vert:
                affiche 'Ta couleur pr√©f√©r√©e est le vert'
            sinon:
                affiche 'Ta couleur pr√©f√©r√©e est pas le vert'

